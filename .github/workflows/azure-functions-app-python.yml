# This workflow will build a Python app and deploy it to an Azure Functions App on Linux when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure Functions app.
# For instructions see https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-python?pivots=python-mode-configuration
#
# To configure this workflow:
# 1. Set up the following secrets in your repository:
#   - AZURE_FUNCTIONAPP_PUBLISH_PROFILE
# 2. Change env variables for your configuration.
#
# For more information on:
#   - GitHub Actions for Azure: https://github.com/Azure/Actions
#   - Azure Functions Action: https://github.com/Azure/functions-action
#   - Publish Profile: https://github.com/Azure/functions-action#using-publish-profile-as-deployment-credential-recommended
#   - Azure Service Principal for RBAC: https://github.com/Azure/functions-action#using-azure-service-principal-for-rbac-as-deployment-credential
#
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples/tree/master/FunctionApp

name: Deploy Python project to Azure Function App

on:
  push:
    branches: ["feature/make_mypage"]

env:
  AZURE_FUNCTIONAPP_NAME: 'your_app_name'   # set this to your function app name on Azure
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './back/your_app_name'       # set this to the path to your function app project, defaults to the repository root
  PYTHON_VERSION: '3.11'                     # set this to the python version to use (e.g. '3.6', '3.7', '3.8')

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    # If you want to use Azure RBAC instead of Publish Profile, then uncomment the task below
    # - name: 'Login via Azure CLI'
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }} # set up AZURE_RBAC_CREDENTIALS secrets in your repository

    - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 'Resolve Project Dependencies Using Pip'
      shell: bash
      run: |
        pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        python -m pip install --upgrade pip
        pip install -r requirements.txt --target=".python_packages/lib/site-packages"
        popd
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f back/requirements.txt ]; then pip install -r back/requirements.txt; fi

    - name: Install Microsoft ODBC
      run: sudo ACCEPT_EULA=Y apt-get install msodbcsql18 -y

    - name: Run tests
      env:
        CONNECTION_STRING: ${{ secrets.CONNECTION_STRING }}
      run: |
        pip install azure-functions
        pytest

    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        publish-profile: ${{ secrets.your_profile }} # Remove publish-profile to use Azure RBAC
        sku: flexconsumption
        remote-build: true
# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - 0x0-eventapp

on:
  push:
    branches:
      - feature/event-management
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'

      - name: npm install, build, and test
        run: |
          cd front
          npm install
          npm run build --if-present
          npm run test --if-present

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'function-event-management'
          slot-name: 'Production'
          package: back/function-event-management
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE_EVENTMANAGEMENT }}
      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

  azure_login:
    runs-on: ubuntu-latest
    steps:
      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

  set_env_vars:
    runs-on: ubuntu-latest
    steps:
      - name: 'Set environment variables'
        run: |
          echo "CLIENT_ID=<CLIENT_ID>" >> $GITHUB_ENV
          echo "CLIENT_SECRET=<CLIENT_SECRET>" >> $GITHUB_ENV
          echo "SUBSCRIPTION_ID=<SUBSCRIPTION_ID>" >> $GITHUB_ENV
          echo "TENANT_ID=<TENANT_ID>" >> $GITHUB_ENV
          echo "ACTIVE_DIRECTORY_ENDPOINT_URL=https://login.microsoftonline.com" >> $GITHUB_ENV
          echo "RESOURCE_MANAGER_ENDPOINT_URL=https://management.azure.com/" >> $GITHUB_ENV
          echo "ACTIVE_DIRECTORY_GRAPH_RESOURCE_ID=https://graph.windows.net/" >> $GITHUB_ENV
          echo "SQL_MANAGEMENT_ENDPOINT_URL=https://management.core.windows.net:8443/" >> $GITHUB_ENV
          echo "GALLERY_ENDPOINT_URL=https://gallery.azure.com/" >> $GITHUB_ENV
          echo "MANAGEMENT_ENDPOINT_URL=https://management.core.windows.net/" >> $GITHUB_ENV